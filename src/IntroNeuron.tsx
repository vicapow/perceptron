import * as React from "react";

function parseSvgPath(
  svgPath: string,
): Array<[string, Array<[number, number]>]> {
  const commands = svgPath.match(/[A-Za-z][^A-Za-z]*/g) || [];

  const results: Array<[string, Array<[number, number]>]> = [];

  for (const command of commands) {
    const commandType = command[0]!;
    const args = command.slice(1).trim();
    const points: Array<[number, number]> = [];

    const argsArray = args.split(/[\s,]+/);

    for (let i = 0; i < argsArray.length; i += 2) {
      const x = parseFloat(argsArray[i]!);
      const y = parseFloat(argsArray[i + 1]!);

      if (!isNaN(x) && !isNaN(y)) {
        points.push([x, y]);
      }
    }
    results.push([commandType, points]);
  }

  return results;
}

const NEURON_D =
  "M152.625 243.332C164.898 251.258 156.223 260.769 187.102 300C183.237 292.691 180.419 284.507 178.603 276.223C178.374 275.176 195.777 277.016 202.111 293.263C199.34 277.412 193.402 274.638 188.255 272.657C183.109 270.676 176.775 267.505 172.42 257.202C168.065 246.899 159.751 208.064 183.109 222.33C202.243 232.369 250.794 261.165 310.585 264.731C381.856 268.983 440.04 256.41 484.38 247.692C528.719 238.973 563.558 230.255 566.329 227.085C568.546 224.549 567.253 241.087 566.329 249.673L570.288 248.88C570.288 240.691 571.555 223.598 576.622 220.745C581.689 217.892 590.082 234.614 593.645 243.332L598 240.955C595.625 234.746 589.29 221.062 582.956 215.989C576.622 210.917 587.443 197.761 593.645 191.817L590.874 188.646C586.255 195.779 575.672 209.57 570.288 207.668C564.904 205.765 569.892 192.873 573.059 186.665L568.704 185.08C565.141 196.176 559.203 203.705 556.036 206.082C552.869 208.46 535.054 199.742 529.115 199.742C526.391 199.742 520.274 198.817 516.843 196.968L514.468 202.12C519.086 202.648 528.007 204.18 526.74 206.082C525.473 207.985 511.432 209.517 504.57 210.045L506.946 214.404C513.94 212.951 529.59 210.045 536.241 210.045C544.555 210.045 570.684 217.971 557.619 222.33C544.555 226.689 375.582 258.536 313.356 254.825C253.565 251.258 210.844 222.594 187.102 210.045C178.754 203.309 184.007 196.247 190.235 192.213C196.965 187.854 212.926 184.291 218.739 183.495C224.551 182.699 236.554 183.495 240.513 183.495C244.471 183.495 254.369 177.947 265.454 172.399C252.785 177.551 234.178 178.739 233.783 176.362C233.387 173.984 277.726 159.322 285.248 156.548C277.33 156.548 265.366 157.522 250.794 162.492C250.624 162.55 254.765 148.422 265.454 142.678C253.973 146.245 249.222 152.717 247.639 154.567C246.055 156.416 242.753 165.251 242.492 165.342C235.98 167.587 231.254 169.229 230.986 169.229C230.76 168.806 206.07 173.984 201.32 174.777C196.569 175.569 181.525 173.192 178.754 169.229C175.983 165.266 176.379 156.548 177.962 152.981C179.546 149.415 206.07 127.62 217.551 103.843C229.032 80.0666 240.505 47.704 250.794 14.6809C239.449 41.4956 216.363 94.3325 214.78 91.1622C213.196 87.992 217.551 40.0426 237.345 21.8138C214.78 29.7394 213.988 75.3112 207.258 93.9362C200.528 112.561 175.587 144.66 170.044 142.282C165.61 140.38 163.845 134.753 162.127 121.279C160.408 107.806 183.901 95.5213 187.068 68.1782C177.006 93.9362 157.376 106.221 157.376 106.221C149.986 84.5576 125.309 41.6277 121.35 35.6835C117.325 29.6398 101.16 9.13298 97.9927 2C97.2009 9.13298 112.641 36.4761 110.661 37.6649C107.973 39.2796 91.9224 22.2101 82.553 14.2846C86.38 21.8138 94.9048 40.0426 112.641 51.1383C134.81 65.008 148.666 111.769 149.458 121.279C150.092 128.888 149.458 145.452 145.103 152.981C140.749 160.511 121.746 166.059 115.412 165.266C109.078 164.473 101.216 159.322 96.805 156.152C92.3937 152.981 77.5103 142.678 73.4823 138.319C61.2869 125.122 71.5029 108.995 77.0453 103.843C73.1728 107.009 62.7586 116.128 61.709 121.279C60.6593 126.431 53.6532 127.699 48.1107 128.809C42.5683 129.918 32.6711 136.338 27.0715 142.678C32.2752 139.508 54.8133 131.186 59.1956 133.168C63.5779 135.149 71.4682 144.263 73.0517 147.434C74.6353 150.604 82.553 160.907 87.6996 166.851L87.9089 167.093C93.0162 172.989 99.1751 180.1 98.7845 192.609C98.3885 205.29 77.0453 203.309 64.3422 205.29C56.3218 206.541 45.0149 209.372 30.2958 212.485C30.1641 212.513 22.378 208.856 19.2109 207.668C16.0438 206.479 10.8972 203.309 4.563 203.705C10.8972 204.255 22.9061 214.009 22.7739 214.035C16.1239 215.367 8.86904 216.71 1 217.971C30.6916 217.971 56.0632 213.215 66.3563 211.63C76.6494 210.045 98.7845 209.253 98.7845 217.971C98.7845 223.856 82.1572 238.434 78.9901 239.893C75.8229 241.351 62.563 233.045 55.6326 231.444C48.7023 229.843 31.8793 232.633 17.2314 232.633C31.0875 233.426 49.2984 234.218 55.6326 236.596C61.9668 238.973 70.1637 247.361 69.8846 247.692C65.5298 252.843 65.9257 252.447 58.7997 261.165C51.6737 269.883 43.756 272.657 29.504 286.13C46.9231 277.412 62.3975 269.487 66.3563 264.731C70.3152 259.976 76.6147 252.447 76.6147 252.447C76.6147 252.447 82.1572 266.317 86.5119 272.261C90.8667 278.205 99.1804 285.734 118.614 300C94.4297 275.827 83.9457 259.426 86.5119 253.636C91.6047 242.144 140.353 235.407 152.625 243.332Z";

export class IntroNeuron extends React.PureComponent {
  override render() {
    const [w, h] = [700, 300];
    //   const commands = parseSvgPath(NEURON_D);
    console.log("rerender neuron");
    return (
      <svg viewBox={`0 0 ${w} ${h}`}>
        {/* <rect x={0} y={0} width={w} height={h} fill="#f0f0f0" /> */}
        <path d={NEURON_D} fill="#DDFFA6" stroke="#ddd" />
        {/* {commands
          .map(([, points]) => {
            return points.map((point, index) => {
              return <circle key={index} cx={point[0]} cy={point[1]} r={2} />;
            });
          })
          .concat()} */}
      </svg>
    );
  }
}
